name: Model Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install pytest numpy

    - name: Create test file
      run: |
        cat > test_model.py << 'EOL'
        import torch
        import pytest
        import torch.nn as nn
        import torch.optim as optim
        from torch.utils.data import DataLoader
        from torchvision import datasets, transforms
        from model import Model
        from train_test import count_parameters, train, test

        @pytest.fixture
        def model():
            return Model()

        @pytest.fixture
        def criterion():
            return nn.CrossEntropyLoss()

        @pytest.fixture
        def optimizer(model):
            return optim.Adam(model.parameters(), lr=0.003)

        @pytest.fixture
        def device():
            return torch.device('cuda' if torch.cuda.is_available() else 'cpu')

        @pytest.fixture
        def train_loader():
            transform = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize((0.1307,), (0.3081,))
            ])
            train_dataset = datasets.MNIST(root='./data', train=True, 
                                         download=True, transform=transform)
            return DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)

        @pytest.fixture
        def test_loader():
            transform = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize((0.1307,), (0.3081,))
            ])
            test_dataset = datasets.MNIST(root='./data', train=False, 
                                        download=True, transform=transform)
            return DataLoader(dataset=test_dataset, batch_size=64, shuffle=False)

        def test_parameter_count(model):
            params = count_parameters(model)
            assert params['total'] < 25000, f"Model has {params['total']} parameters, should be less than 25000"

        def test_training_and_accuracy(model, train_loader, test_loader, optimizer, criterion, device):
            model = model.to(device)
            
            # Train for 1 epoch using the imported train function
            train_loss, train_accuracy = train(model, train_loader, 1, optimizer, criterion, device)
            assert train_accuracy > 90, f"Training accuracy is {train_accuracy}%, should be > 90%"
            
            # Test accuracy check
            test_loss, test_accuracy = test(model, test_loader, criterion, device)
            assert test_accuracy > 95, f"Test accuracy is {test_accuracy}%, should be > 95%"
        EOL

    - name: Run tests
      run: |
        pytest test_model.py -v 