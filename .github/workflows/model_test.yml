name: Model Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
        pip install pytest numpy matplotlib pillow

    - name: Create test file
      run: |
        cat > test_model.py << 'EOL'
        import torch
        import pytest
        import torch.nn as nn
        import torch.optim as optim
        from torch.utils.data import DataLoader
        from torchvision import datasets, transforms
        from model import Model
        from train_test import count_parameters, train, test

        @pytest.fixture
        def model():
            return Model()

        @pytest.fixture
        def criterion():
            return nn.CrossEntropyLoss()

        @pytest.fixture
        def optimizer(model):
            return optim.Adam(model.parameters(), lr=0.003)

        @pytest.fixture
        def device():
            return torch.device('cuda' if torch.cuda.is_available() else 'cpu')

        @pytest.fixture
        def train_loader():
            transform = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize((0.1307,), (0.3081,))
            ])
            train_dataset = datasets.MNIST(root='./data', train=True, 
                                         download=True, transform=transform)
            return DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)

        @pytest.fixture
        def test_loader():
            transform = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize((0.1307,), (0.3081,))
            ])
            test_dataset = datasets.MNIST(root='./data', train=False, 
                                        download=True, transform=transform)
            return DataLoader(dataset=test_dataset, batch_size=64, shuffle=False)

        def test_parameter_count(model):
            params = count_parameters(model)
            assert params['total'] < 25000, f"Model has {params['total']} parameters, should be less than 25000"

        def test_training_and_accuracy(model, train_loader, test_loader, optimizer, criterion, device):
            model = model.to(device)
            
            # Train for 1 epoch using the imported train function
            train_loss, train_accuracy = train(model, train_loader, 1, optimizer, criterion, device)
            assert train_accuracy > 95, f"Training accuracy is {train_accuracy}%, should be > 95%"
            
            # Test accuracy check
            test_loss, test_accuracy = test(model, test_loader, criterion, device)
            assert test_accuracy > 95, f"Test accuracy is {test_accuracy}%, should be > 95%"

        def test_mnist_normalization_parameters():
            # Load MNIST dataset without any transforms
            dataset = datasets.MNIST(root='./data', train=True, download=True, transform=transforms.ToTensor())
            # batch_size is entire dataset size -> to load whole dataset in one go
            data_loader = DataLoader(dataset, batch_size=len(dataset))
            
            # Get all images in one batch
            images, _ = next(iter(data_loader))
            
            # Calculate mean and std across all images
            calculated_mean = torch.mean(images)
            calculated_std = torch.std(images)
            
            # The values used in the transform
            used_mean = 0.1307
            used_std = 0.3081
            
            # Assert that the values are close to the ones we use
            torch.testing.assert_close(calculated_mean, torch.tensor(used_mean), rtol=0.01, atol=0.01)
            torch.testing.assert_close(calculated_std, torch.tensor(used_std), rtol=0.01, atol=0.01)

        def test_model_architecture():
            """Test if model architecture is valid"""
            model = Model()
            # Test input shape
            test_input = torch.randn(1, 1, 28, 28)  # MNIST image size
            try:
                output = model(test_input)
                assert output.shape == (1, 10), f"Expected output shape (1, 10), got {output.shape}"
            except Exception as e:
                pytest.fail(f"Model forward pass failed: {str(e)}")

        def test_data_augmentation():
            """Test if data augmentation transforms are working"""
            from train_test import create_dataset_loaders
            
            # Get loaders with and without augmentation
            train_loader_aug, _ = create_dataset_loaders(augmentation=True)
            train_loader_no_aug, _ = create_dataset_loaders(augmentation=False)
            
            # Get a batch from each
            aug_images, _ = next(iter(train_loader_aug))
            no_aug_images, _ = next(iter(train_loader_no_aug))
            
            # Check if augmented and non-augmented images are different
            assert not torch.allclose(aug_images, no_aug_images), "Augmentation did not modify the images"

        EOL

    - name: Run tests
      run: |
        pytest test_model.py -v 